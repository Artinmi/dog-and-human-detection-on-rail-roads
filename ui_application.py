# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import cv2, imutils
import tensorflow as tf
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage
import glob, os

from ai import model

class Ui_ArtinMokhtarihaThesis(object):
    def setupUi(self, ArtinMokhtarihaThesis):
        ArtinMokhtarihaThesis.setObjectName("ArtinMokhtarihaThesis")
        ArtinMokhtarihaThesis.resize(1656, 825)
        ArtinMokhtarihaThesis.setAcceptDrops(False)
        self.centralwidget = QtWidgets.QWidget(ArtinMokhtarihaThesis)
        self.centralwidget.setObjectName("centralwidget")
        self.input_image = QtWidgets.QLabel(self.centralwidget)
        self.input_image.setGeometry(QtCore.QRect(10, 20, 640, 640))
        self.input_image.setText("")
        self.input_image.setPixmap(QtGui.QPixmap("input_image.png"))
        self.input_image.setObjectName("input_image")
        self.load_image = QtWidgets.QPushButton(self.centralwidget)
        self.load_image.setGeometry(QtCore.QRect(205, 670, 250, 24))
        self.load_image.setObjectName("load_image")
        self.predict = QtWidgets.QPushButton(self.centralwidget)
        self.predict.setGeometry(QtCore.QRect(905, 670, 250, 24))
        self.predict.setObjectName("predict")
        self.prediction = QtWidgets.QLabel(self.centralwidget)
        self.prediction.setGeometry(QtCore.QRect(710, 20, 640, 640))
        self.prediction.setText("")
        self.prediction.setPixmap(QtGui.QPixmap("prediction.png"))
        self.prediction.setObjectName("prediction")
        self.show_predictions = QtWidgets.QLabel(self.centralwidget)
        self.show_predictions.setGeometry(QtCore.QRect(1380, 50, 221, 131))
        self.show_predictions.setObjectName("show_predictions")
        ArtinMokhtarihaThesis.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ArtinMokhtarihaThesis)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1656, 21))
        self.menubar.setObjectName("menubar")
        ArtinMokhtarihaThesis.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ArtinMokhtarihaThesis)
        self.statusbar.setObjectName("statusbar")
        ArtinMokhtarihaThesis.setStatusBar(self.statusbar)

        self.retranslateUi(ArtinMokhtarihaThesis)
        self.load_image.clicked.connect(self.loadImage)  # type: ignore
        self.predict.clicked.connect(self.model_predict)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(ArtinMokhtarihaThesis)

        ### main attributes
        self.filename = None
        self.tmp = None

    def loadImage(self):
        self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
        print(self.filename)
        self.image = cv2.imread(self.filename)
        self.setPhoto(self.image)

    def setPhoto(self, image):
        self.tmp = image
        image = cv2.resize(image, (640, 640))
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.input_image.setPixmap(QtGui.QPixmap.fromImage(image))

    def model_predict(self):
        print('origin:', self.filename)
        image_name = self.filename.split('/')[-1]
        print('image name:', image_name)
        pred = model.predict(self.filename, save=True)
        images = []
        for root, dirs, files in os.walk(pred[0].save_dir):
            for name in files:
                if name == image_name:
                    file_path = os.path.join(root, name)
                    images.append(file_path)

        print(images)
        print("file_path", file_path)

        image = cv2.imread(file_path)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = cv2.resize(image, (640, 640))
        image = QImage(image, image.shape[1], image.shape[0], image.strides[0], QImage.Format_RGB888)

        self.prediction.setPixmap(QtGui.QPixmap(image))
        self.update_text(pred[0])

    def update_text(self, pred):
        data = pred.boxes.data.cpu().detach().numpy()[:, -2:]
        l = ''
        for row in data:
            if row[-1] == 0:
                l += '{}: {:>.2f}\n'.format('dog', row[0] * 100)
            elif row[-1] == 1:
                l += '{}: {:>.2f}\n'.format('preson', row[0] * 100)
            elif row[-1] == 2:
                l += '{}: {:>.2f}\n'.format('rail', row[0] * 100)
        self.show_predictions.setText((l))

    def retranslateUi(self, ArtinMokhtarihaThesis):
        _translate = QtCore.QCoreApplication.translate
        ArtinMokhtarihaThesis.setWindowTitle(_translate("ArtinMokhtarihaThesis", "ArtinMokhtariha Thesis"))
        self.load_image.setText(_translate("ArtinMokhtarihaThesis", "load image"))
        self.predict.setText(_translate("ArtinMokhtarihaThesis", "predict"))